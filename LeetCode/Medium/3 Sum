# useful link that explains in great detail I highly suggest you give this a read: 
# https://leetcode.com/problems/3sum/discuss/232712/Best-Python-Solution-(Explained)
# Day 71


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        triplets = []
        nums.sort()
        length = len(nums)
        
        for i in range(length-2): #[8]
            if nums[i]>0: break #[7]
            if i>0 and nums[i]==nums[i-1]: continue #[1]
            # left/right
            l = i+1
            r = length-1 #[2]
            
            while l<r:
                total = nums[i]+nums[l]+nums[r]
                
                if total<0: #[3] 
                    l+=1 # move left
                elif total>0: #[4]
                    r-=1 # move right
                else: #[5]
                    triplets.append([nums[i], nums[l], nums[r]])
                    
                    while l<r and nums[l]==nums[l+1]: #[6]
                        l+=1 # move left to potenially get another unique solution
                    while l<r and nums[r]==nums[r-1]: #[6]
                        r-=1 # move right to potenially get another unique solution
                        
                    l+=1
                    r-=1
                    
        return triplets
        # O(n^2)
