# useful links :https://leetcode.com/problems/4sum/discuss/534913/Simple-modular-2Sum-greater3Sum-greater4Sum
# Highly suggest watching this video to better understand code: https://www.youtube.com/watch?v=bixvM1-28us
# Day 72


class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        ans = set() # set sicne we don't want duplicates
        
        for i in range(len(nums)-2):
            a = nums[i]
            self.threeSum(nums, a, target, i, ans) # have to call self
        
        return ans
    
    def threeSum(self, nums, a, target, i, ans):
        for j in range(i+1,len(nums)-1):
            b = nums[j]
            self.twoSum(nums, a, b, target, j, ans)
        
    def twoSum(self, nums, a, b, target, j, ans):
        d = {}
        
        for k in range(j+1, len(nums)): # acts as left/right pointers from 3 sum 
            c = nums[k]
            if target-(a+b+c) in d:
                l = tuple(sorted([a,b,c,target-(a+b+c)]))
                ans.add(l)
            d[c] = k #2Sum reports index
        
