# links:
1) https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/
2) https://www.youtube.com/watch?v=QkEOGoUar3g
3) https://www.youtube.com/watch?v=-uR7BSfNJko
4) https://www.geeksforgeeks.org/shortest-path-unweighted-graph/
5) https://www.geeksforgeeks.org/minimum-number-of-edges-between-two-vertices-of-a-graph/
6) https://github.com/minsuk-heo/problemsolving/blob/master/graph/bfs.py

The way it wokrs:
Works by having a visited array to keep track of vertices visited in case of a cycle
the first thing in our queue is our start vertex
while the queue is not empty pop the front of the queue
traverse its adjacent vertices (if they exist) and increment the distance from the start by its predecessor + 1
mark the vertice as visited and push it onto the queue

There are a few variations to its implementation like number of classes/objects does it take into account distance etc.
After looking at a few below is what I think is the most straight forward as easiest to understand for me.

vertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
edges = [(0,1), (1,2), (1,3), (3,4), (4,5), (1,6)]
graphs = (vertexList, edgeList) # not an actual object used to store v and e

def bfs(graph, src):
    vertices, edges = graph
    visited = [False for i in range(len(vertices))]
    q = queue()
    q.push(src)
    adj = [[] for vertex in vertices]
    dist = [0] * len(vertices) # distance from src array
    dist[src] = 0
    # fill adjacencyList from graph
    for edge in edges:
        adj[edge[0]].append(edge[1])

    # bfs
    while q: # meaning while the queue has something in it
        u = q.pop()
        for v in adj[u]: # looping through connected vertices to current
            if v not in visited:
                q.insert(v)
                dist[v] = dist[u] + 1 # update distance to it's predecessor + 1
        visited[u] = True
    return visited
