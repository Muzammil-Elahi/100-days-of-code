# useful link: https://leetcode.com/problems/strong-password-checker/discuss/91008/Simple-Python-solution
# Day 100!

"""
If length of the string is larger than 20,
we will need to delete some chars and appropriate deletion can reduce the number of replacements needed
to break repeating sequences after deletion. For any repeating sequences with len % 3 == 0,
we need to make len/3 replacements and we can reduce the number of replacements len/3 by one by deleting one character.
Similarly, for any repeating sequences with len % 3 == 1, we can reduce one replacement by deleting two characters.
Now we know that for all sequences, including those already deleted chars from,
we have len % 3 == 2 so we can reduce every replacement by deleting three characters such that every deleting action counts.
"""

class Solution:
    def strongPasswordChecker(self, s: str) -> int:
        n = len(s)
        ans = 0
        missing_type = 3 # based on condition 2
        # subtract 1 from missing types if parts of condition 2 are met 
        if any('a' <= c <= 'z' for c in s): missing_type -= 1
        if any('A' <= c <= 'Z' for c in s): missing_type -= 1
        if any(c.isdigit() for c in s): missing_type -= 1

        ans = 0
        one = two = 0 # for repeated chars if we need to make 1 or 2 changes i.e replace/insert/delete
        temp = 2
        while temp < n:
            if s[temp] == s[temp-1] == s[temp-2]:
                length = 2 # instance of 3 chars
                while temp < n and s[temp] == s[temp-1]:
                    length += 1 # more than 3 chars repeated
                    temp += 1
                    
                ans += length / 3 
                if length % 3 == 0: one += 1 
                elif length % 3 == 1: two += 1
            else:
                temp += 1
        
        if n < 6:
            return int(max(missing_type, 6 - n))
        elif n <= 20:
            return int(max(missing_type, ans))
        else:
            delete = n - 20 # more than 3 chars so we have to delete chars
            
            ans -= min(delete, one)
            ans -= min(max(delete - one, 0), two * 2) / 2
            ans -= max(delete - one - 2 * two, 0) / 3
                
            return int(delete + max(missing_type, ans)) # itn cast to get rid of decimal
            
            
        """
        if n < 5:
            return 6-n
        elif n == 5:
            return 6-n+1
        elif n > 20:
            return n -20
        c1 = False
        c2 = False
        c3 = False
        for i in range(n):
            if s[i].islower():
                c1 = True
            elif s[i].isupper():
                c2 = True
            elif s[i].isdigit():
                c3 = True
        if c1 == True and c2 == True and c3 == True:
            for i in range(n):
        """
                
        
