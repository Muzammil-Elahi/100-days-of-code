# useful links: https://www.geeksforgeeks.org/maximum-adjacent-difference-array-sorted-form/, https://leetcode.com/problems/maximum-gap/solution/, https://leetcode.com/problems/maximum-gap/discuss/50655/python-solution-with-detailed-explanation
# Day 94

# taken from geeks for geeks I just added comments for my understanding
class Solution:
    def maximumGap(self, arr: List[int]) -> int:
        n = len(arr)
        INT_MIN, INT_MAX = float('-inf'), float('inf') # some arbitrary value as python doesn't have integer.max or min like java could also use None
        if n < 2:
            return 0
        # Find maximum and minimum in arr[]  
        maxVal, minVal = arr[0], arr[0]  
        for i in range(1, n):  
            maxVal = max(maxVal, arr[i])  
            minVal = min(minVal, arr[i])  
  
    # Arrays to store maximum and minimum  
    # values in n-1 buckets of differences. By pigeon hole principale
        maxBucket = [INT_MIN] * (n - 1)  
        minBucket = [INT_MAX] * (n - 1)  
      
    # Expected gap for every bucket. If elements are sorted  
        delta = (maxVal - minVal) // (n - 1)  
  
    # Traversing through array elements and  
    # filling in appropriate bucket if bucket  
    # is empty. Else updating bucket values.  
        for i in range(0, n): 
            if arr[i] == maxVal or arr[i] == minVal: # current num in bucket is either golbal max or min then skip
                continue
  
        # Finding index of bucket.  
            index = (arr[i] - minVal) // delta  
  
        # Filling/Updating maximum value 
        # of bucket  
            if maxBucket[index] == INT_MIN: # bucket is empty
                maxBucket[index] = arr[i]  
            else: # bucket not empty pick max value
                maxBucket[index] = max(maxBucket[index], 
                                             arr[i])  
  
        # Filling/Updating minimum value of bucket  
            if minBucket[index] == INT_MAX:  
                minBucket[index] = arr[i]  
            else: 
                minBucket[index] = min(minBucket[index], 
                                             arr[i])  
      
    # Finding maximum difference between   
    # maximum value of previous bucket  
    # minus minimum of current bucket.  
        prev, ans = minVal, 0
      
        for i in range(0, n - 1):  
            if minBucket[i] == INT_MAX:  
                continue
              
            ans = max(ans,  
                      minBucket[i] - prev)  
            prev = maxBucket[i]  
      
        ans = max(ans, maxVal - prev)  
  
        return ans 
    # BELOW IS MY ORGINAL CODE 
    """
        ans = abs(max(nums)-min(nums)) # make -1 since 0 is a valid ans
        s = set(nums)
       # for num in nums:
           # s.add(num)
        print(s)
        count = 0
        temp = 0
        diff = 0
        for i in s:
            #print("i ",i,end=" ")
            #print("next ",next(iter(s)))
            if count == 0:
                temp = i
                count+=1
            else:
                diff = abs(temp - i)
                temp = i
            if diff < ans:
                ans = diff
        return ans 
        """
                
        
