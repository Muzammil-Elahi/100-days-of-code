# useful links: https://www.youtube.com/watch?v=1t-082mMScY, https://www.geeksforgeeks.org/longest-consecutive-subsequence/
# Day 93

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        s = set() # acts as hashset and acts rid of duplicates
        for num in nums:
            s.add(num)
        #print(s)
        length = 0
        for i in range(len(nums)): # don't have to checking elements more than once as we could be looking at a subset of the longest sequence, done below
            if (nums[i]-1) not in s: # if current element is the start of the sequence and not a subset
                temp = nums[i]
                #print(temp)
                while (temp in s): # check for next consecutive element, if it is increase our current length
                    temp+=1
                # temp - nums[i] to get actual current length
                length = max(length,temp-nums[i]) 
        return length
        
