# useful links: https://medium.com/@dimko1/largest-rectangle-in-histogram-bbd7c1e1158, https://github.com/NEWBEE108/LeetCode/blob/master/Python/largest-rectangle-in-histogram.py
# Day 99
# O(n) using a stack
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = [-1]
        area = 0
        n = len(heights)
        for i in range(n):
          # we are saving indexes in stack that is why we comparing last element in stack
          # with current height to check if last element in stack not bigger then
          # current element
            while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:
                end_index = stack.pop() # index of last element in the array
                area = max(area, heights[end_index] * (i - stack[-1] - 1))
            stack.append(i)

      # we went through all elements of heights array
      # let's check if we have something left in stack
        while stack[-1] != -1: # while stack is not empty lets make it empty
            end_index = stack.pop()
            area = max(area, heights[end_index] * (n - stack[-1] - 1))

        return area
