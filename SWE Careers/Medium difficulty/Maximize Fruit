# Helpful link: https://leetcode.com/problems/fruit-into-baskets/discuss/170841/Java-Solution:-With-detailed-explanation
"""
1) Maintain 2 indices both starting from the beginning of the tree array viz., left and right.
2) Keep moving right as long as the fruit type is same, when fruitType changes we'll check the fruitType is greater than 2
since we have 2 baskets to fill. At this point, move left pointer till we have only 2 fruit types.
3) From the problem statement we know that same fruit can appear in different parts of the array(duplicate array elements are allowed).
So, we need an accumulator based on fruitType. We can use an array for this.
4) After this check the difference between right and left. That's the tree subarry with only 2 fruit types.
5) Keep updating the maxFruits with (right - left + 1). (Why +1? Since arrays start at 0).
"""
# day 54
import collections 
class Solution:
    def totalFruit(self, tree: List[int]) -> int:
        max_fruit = 0
        left = 0
        fruit_type = collections.Counter()
        for right, x in enumerate(tree):
            fruit_type[x] += 1
            while len(fruit_type) >= 3:
                fruit_type[tree[left]] -= 1
                if fruit_type[tree[left]] == 0:
                    del fruit_type[tree[left]]
                left += 1
            max_fruit = max(max_fruit, right - left + 1)
        return max_fruit;
