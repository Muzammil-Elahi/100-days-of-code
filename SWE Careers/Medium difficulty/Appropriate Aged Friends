useful link: https://leetcode.com/problems/friends-of-appropriate-ages/discuss/127029/C%2B%2BJavaPython-Easy-and-Straight-Forward/267903/
# Day 59

Explanation:
1. Write a sub function request(a, b) to check if age a will friend requests age b.
Just copy it from description:
return !(condition1 || condition2 || condition3)

2.Count nunmber of all ages to a map.
Because we have at most 20000 ages but only in range [1, 120].

3.For each age a and each age b != a, if request(a, b), we will make count[a] * count[b] requests.

4. For each age a, if request(a, a), we will make count[a] * (count[a] - 1) requests.

import collections
class Solution:
    def numFriendRequests(self, ages: List[int]) -> int:
        def request(a, b):
            return not (b <= 0.5 * a + 7 or b > a or b > 100 and a < 100)
        c = collections.Counter(ages)
        return sum(request(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)
