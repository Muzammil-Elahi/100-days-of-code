# useful links: https://www.youtube.com/watch?v=NnD96abizww
# https://www.geeksforgeeks.org/python-program-for-longest-common-subsequence/
# https://www.geeksforgeeks.org/printing-longest-common-subsequence/
# Day 78


#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the longestCommonSubsequence function below.
def longestCommonSubsequence(a, b):
    # find the length of the strings 
    x = len(a) 
    y = len(b) 
  
    # declaring the array for storing the dp values 
    dp = [[None]*(y + 1) for i in range(x + 1)] # same as a whiteboard example want extra row/column for zeros

    for i in range(x+1):
        for j in range(y+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif a[i-1] == b[j-1]:
                dp[i][j] = dp[i-1][j-1]+1
            else:
                dp[i][j] = max(dp[i-1][j],dp[i][j-1])

    # travsering backwards to get the actual LCS
    index = dp[x][y] 
  
    # Create a character array to store the lcs string 
    lcs = [""] * (index+1) 
    lcs[index] = "" 
  
    # Start from the right-most-bottom-most corner and 
    # one by one store characters in lcs[] 
    i = x 
    j = y 
    while i > 0 and j > 0: 
  
        # If current character in a and b are same, then 
        # current character is part of LCS 
        if a[i-1] == b[j-1]: 
            lcs[index-1] = a[i-1] 
            i-=1
            j-=1
            index-=1
  
        # If not same, then find the larger of two and 
        # go in the direction of larger value 
        elif dp[i-1][j] > dp[i][j-1]: 
            i-=1
        else: 
            j-=1
            
    return lcs

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    a = list(map(int, input().rstrip().split()))

    b = list(map(int, input().rstrip().split()))

    result = longestCommonSubsequence(a, b)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
